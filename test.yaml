AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploy SensorDB, Lambda, IoT Rule, and API Gateway

Resources:

  SensorDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SensorDB
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DormName
          AttributeType: S
        - AttributeName: TimeStamp
          AttributeType: S
      KeySchema:
        - AttributeName: DormName
          KeyType: HASH
        - AttributeName: TimeStamp
          KeyType: RANGE

  IoTProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeProcess
      Handler: index.lambda_handler
      Role: arn:aws:iam::599754495757:role/LabRole
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          from datetime import datetime
          from boto3.dynamodb.types import Decimal
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('SensorDB')
              timestamp = datetime.now().isoformat()

              try:
                  orp_value = Decimal(str(event['ORP']))
                  water_data = {
                      'DormName': event['DormName'],
                      'TimeStamp': timestamp,
                      'ORP': orp_value,
                      'temp': Decimal(str(event['temp'])),
                      'pH': Decimal(str(event['pH']))
                  }

                  for attempt in range(3):
                      try:
                          table.put_item(Item=water_data)
                          break
                      except ClientError as err:
                          if attempt < 2:
                              time.sleep(1)
                          else:
                              raise

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Water quality data stored successfully')
                  }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error storing data: {str(e)}")
                  }

  RetrieveSensorDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SensorRead
      Handler: index.lambda_handler
      Role: arn:aws:iam::599754495757:role/LabRole
      Runtime: python3.12
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: SensorDB
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from decimal import Decimal

          class DecimalEncoder(json.JSONEncoder):
              def default(self, o):
                  if isinstance(o, Decimal):
                      return int(o) if o % 1 == 0 else float(o)
                  return super(DecimalEncoder, self).default(o)

          dynamodb = boto3.resource('dynamodb')
          table_name = os.environ.get('DYNAMODB_TABLE_NAME', 'SensorDB')
          table = dynamodb.Table(table_name)

          def lambda_handler(event, context):
              try:
                  response = table.scan()
                  items = response.get('Items', [])

                  while 'LastEvaluatedKey' in response:
                      response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                      items.extend(response.get('Items', []))

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps(items, cls=DecimalEncoder)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IoTProcessFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceArn: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/SensorDataIngestRule

  IoTRuleSensorData:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: SensorDataIngestRule
      TopicRulePayload:
        Sql: |
          SELECT DormName, ORP, temp, pH
          FROM 'sensor/+/data'
        RuleDisabled: false
        AwsIotSqlVersion: "2016-03-23"
        Actions:
          - Lambda:
              FunctionArn: !GetAtt IoTProcessFunction.Arn

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyDataApi
      Description: API for data operations

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: data
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt RetrieveSensorDataFunction.Arn
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: '200'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  LambdaPermissionForApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RetrieveSensorDataFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/data

Outputs:
  ApiUrl:
    Description: "API Gateway Invoke URL for Prod stage"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/data"

  SensorDBTableName:
    Description: "Name of the DynamoDB table"
    Value: !Ref SensorDBTable