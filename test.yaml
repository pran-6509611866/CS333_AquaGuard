AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy SensorDB, Lambda, IoT Rule, and IoT Thing Setup (no certificate)

Resources:

  SensorDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SensorDB
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DormName
          AttributeType: S
        - AttributeName: TimeStamp
          AttributeType: S
      KeySchema:
        - AttributeName: DormName
          KeyType: HASH
        - AttributeName: TimeStamp
          KeyType: RANGE

  IoTProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeProcess
      Handler: index.lambda_handler
      Role: arn:aws:iam::599754495757:role/LabRole  # แก้ตาม Role ที่มีสิทธิ
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          from datetime import datetime
          from boto3.dynamodb.types import Decimal
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('SensorDB')
              timestamp = datetime.now().isoformat()

              try:
                  orp_value = Decimal(str(event['ORP']))
                  water_data = {
                      'DormName': event['DormName'],
                      'TimeStamp': timestamp,
                      'ORP': orp_value,
                      'temp': Decimal(str(event['temp'])),
                      'pH': Decimal(str(event['pH']))
                  }

                  for attempt in range(3):
                      try:
                          table.put_item(Item=water_data)
                          break
                      except ClientError as err:
                          if attempt < 2:
                              time.sleep(1)
                          else:
                              raise

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Water quality data stored successfully')
                  }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error storing data: {str(e)}")
                  }

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IoTProcessFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceArn: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/SensorDataIngestRule

  IoTRuleSensorData:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: SensorDataIngestRule
      TopicRulePayload:
        Sql: |
          SELECT DormName, ORP, temp, pH
          FROM 'sensor/+/data'
        RuleDisabled: false
        AwsIotSqlVersion: "2016-03-23"
        Actions:
          - Lambda:
              FunctionArn: !GetAtt IoTProcessFunction.Arn

  WaterSensorThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: WaterSensorThing

  WaterSensorPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: WaterSensorPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource:
              - arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*
              - arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/sensor/*
              - arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/sensor/*

Outputs:
  ThingName:
    Description: The name of the IoT Thing
    Value: !Ref WaterSensorThing

  PolicyName:
    Description: The name of the IoT Policy
    Value: !Ref WaterSensorPolicy
